# ----- TO ENABLE LATER -----
# To make merges easier, I’ve decided to enable these at a later point in time.

PerlBackrefs:
  Enabled: false

RegexpLiteral:
  Enabled: false

RescueException:
  Enabled: false

# This is used in tests, to verify the effect of state-changing functions.
Style/GlobalVars:
  Enabled: false

ClassAndModuleChildren:
  Enabled: false



# ----- DISABLED (hard) -----

# Hash parameters should not have braces, but this cop is unable to distinguish
# between has parameters and methods that take a hash as a param.
BracesAroundHashParameters:
  Enabled: false

# nanoc relies on eval in several cases (code snippets and some helpers).
Eval:
  Enabled: false

# Only used for deprecated code that is gone in nanoc 4.x anyway.
#
# Re-enable in nanoc 4.x.
ClassVars:
  Enabled: false

# We use filenames such as “create-site.rb” that translate to method names.
FileName:
  Enabled: false

# We use get_binding to extract the binding
AccessorMethodName:
  Enabled: false

# This trips up on a piece of code that handles URI fragments.
LeadingCommentSpace:
  Enabled: false

# We use _erbout.
Lint/UnderscorePrefixedVariableName:
  Enabled: false



# ----- DISABLED (opinionated) -----

# This can lead to massive indentation.
Style/AlignHash:
  Enabled: false

# It’s difficult to rework existing code to handle this well.
Metrics/AbcSize:
  Enabled: false

# Possibly enable later.
Metrics/ModuleLength:
  Enabled: false

# Parameters are indented one soft tab instead.
AlignParameters:
  Enabled: false

# We should embrace UTF-8, not avoid it. Since the Encoding cop is enabled,
# there’s no point in enforcing ASCII comments.
AsciiComments:
  Enabled: false

# Mostly long hardcoded strings which I’d rather not break up (yet).
#
# Re-enable in nanoc 4.x.
LineLength:
  Enabled: false

# Other tools exist for checking code quality. This cop is probably good to
# have, but nanoc 3.x will not get any major refactorings anymore anyway.
#
# Possibly re-enable in nanoc 4.x.
ClassLength:
  Enabled: false

# Other tools exist for checking code quality. This cop is probably good to
# have, but nanoc 3.x will not get any major refactorings anymore anyway.
#
# Possibly re-enable in nanoc 4.x.
PerceivedComplexity:
  Enabled: false

# Other tools exist for checking code quality. This cop is probably good to
# have, but nanoc 3.x will not get any major refactorings anymore anyway.
#
# Possibly re-enable in nanoc 4.x.
CyclomaticComplexity:
  Enabled: false

# It does not make sense to enforce everything to have documentation.
Documentation:
  Enabled: false

# nanoc suppresses exceptions for valid reasons in a few cases.
HandleExceptions:
  Enabled: false

# if/unless at the end of the line makes it too easy to oversee.
IfUnlessModifier:
  Enabled: false

# This causes the hashes to be ridiculously indented.
IndentHash:
  Enabled: false

# Other tools exist for checking code quality. This cop is probably good to
# have, but nanoc 3.x will not get any major refactorings anymore anyway.
#
# Possibly re-enable in nanoc 4.x.
MethodLength:
  Enabled: false

# Personal preference is to have decent constructors for exceptions rather than
# just a class and a message.
RaiseArgs:
  Enabled: false

# Personal preference is to use `raise` to signal exceptions (normal control
# flow should not use exceptions anyway).
SignalException:
  Enabled: false

# Some methods that appear to be accessors (return a single value or set a
# single value) should still not be considered to be accessors. This is a purely
# semantic difference.
TrivialAccessors:
  Enabled: false

# Trailing commas improve diffs. One could argue that diff algorithms should be
# able to handle this, but they cannot, so this is disabled.
TrailingComma:
  Enabled: false

# This does not always semantically make sense.
GuardClause:
  Enabled: false
