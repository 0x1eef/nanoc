# ----- CONFIGURED -----

TrailingComma:
  EnforcedStyleForMultiline: comma



# ----- TO ENABLE LATER -----
# To make merges easier, I’ve decided to enable these at a later point in time.

RegexpLiteral:
  Enabled: false

RescueException:
  Enabled: false

# This is used in tests, to verify the effect of state-changing functions.
Style/GlobalVars:
  Enabled: false

ClassAndModuleChildren:
  Enabled: false

Style/AlignHash:
  Enabled: false

Style/EmptyElse:
  Enabled: false

Style/Next:
  Enabled: false

Lint/NonLocalExitFromIterator:
  Enabled: false



# ----- DISABLED (hard) -----

# Hash parameters should not have braces, but this cop is unable to distinguish
# between has parameters and methods that take a hash as a param.
BracesAroundHashParameters:
  Enabled: false

# nanoc relies on eval in several cases (code snippets and some helpers).
Eval:
  Enabled: false

# We use filenames such as “create-site.rb” that translate to method names.
FileName:
  Enabled: false

# We use get_binding to extract the binding
AccessorMethodName:
  Enabled: false

# We use _erbout.
Lint/UnderscorePrefixedVariableName:
  Enabled: false



# ----- DISABLED (metrics) -----

# Cops for metrics are disabled because they should not cause tests to fail.

Metrics/AbcSize:
  Enabled: false

Metrics/BlockNesting:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/LineLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false

Metrics/ParameterLists:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false



# ----- DISABLED (opinionated) -----

# Parameters are indented one soft tab instead.
AlignParameters:
  Enabled: false

# We should embrace UTF-8, not avoid it. Since the Encoding cop is enabled,
# there’s no point in enforcing ASCII comments.
AsciiComments:
  Enabled: false

# It does not make sense to enforce everything to have documentation.
Documentation:
  Enabled: false

# nanoc suppresses exceptions for valid reasons in a few cases.
HandleExceptions:
  Enabled: false

# if/unless at the end of the line makes it too easy to oversee.
IfUnlessModifier:
  Enabled: false

# This causes the hashes to be ridiculously indented.
IndentHash:
  Enabled: false

# Personal preference is to have decent constructors for exceptions rather than
# just a class and a message.
RaiseArgs:
  Enabled: false

# Personal preference is to use `raise` to signal exceptions (normal control
# flow should not use exceptions anyway).
SignalException:
  Enabled: false

# Some methods that appear to be accessors (return a single value or set a
# single value) should still not be considered to be accessors. This is a purely
# semantic difference.
TrivialAccessors:
  Enabled: false

# This does not always semantically make sense.
GuardClause:
  Enabled: false
