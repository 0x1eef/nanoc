# ----- ENABLED -----

AccessModifierIndentation:
  Enabled: true
  EnforcedStyle: outdent

Alias:
  Enabled: true

AndOr:
  Enabled: true

AssignmentInCondition:
  Enabled: true

Blocks:
  Enabled: true

CaseEquality:
  Enabled: true

# Inject is omitted here, at least for the time being.
CollectionMethods:
  Enabled: true
  PreferredMethods:
    collect: 'map'
    collect!: 'map!'
    detect: 'find'
    find_all: 'select'

TrailingBlankLines:
  Enabled: true

TrailingWhitespace:
  Enabled: true

ColonMethodCall:
  Enabled: true

ConstantName:
  Enabled: true

DefWithoutParentheses:
  Enabled: true

EmptyLineBetweenDefs:
  Enabled: true



# ----- DISABLED (hard) -----

# Ruby 1.8 compatibility is required.
#
# Re-enable in nanoc 4.x.
HashSyntax:
  Enabled: false

# We should embrace UTF-8, not avoid it. Since the Encoding cop is enabled,
# there’s no point in enforcing ASCII comments.
AsciiComments:
  Enabled: false

# Hash parameters should not have braces, but this cop is unable to distinguish
# between has parameters and methods that take a hash as a param.
BracesAroundHashParameters:
  Enabled: false



# ----- DISABLED (opinionated) -----

# Parameters are indented one soft tab instead.
AlignParameters:
  Enabled: false

# This does not accomodate for code such as
#
# foo = case blah
#   when x
#     …
#   end
CaseIndentation:
  Enabled: false

# Personal convention is to use “memo” and an appropriate name for the element.
SingleLineBlockParams:
  Enabled: false

# Mostly long hardcoded strings which I’d rather not break up (yet).
#
# Re-enable in nanoc 4.x.
LineLength:
  Enabled: false

# Other tools exist for checking code quality. This cop is probably good to
# have, but nanoc 3.x will not get any major refactorings anymore anyway.
#
# Possibly re-enable in nanoc 4.x.
ClassLength:
  Enabled: false

# Only used for deprecated code that is gone in nanoc 4.x anyway.
#
# Re-enable in nanoc 4.x.
ClassVars:
  Enabled: false

# Personal convention is to use colon-less annotations.
CommentAnnotation:
  Enabled: false

# Other tools exist for checking code quality. This cop is probably good to
# have, but nanoc 3.x will not get any major refactorings anymore anyway.
#
# Possibly re-enable in nanoc 4.x.
CyclomaticComplexity:
  Enabled: false

# It does not make sense to enforce everything to have documentation.
Documentation:
  Enabled: false

# Personal preference is putting the dot at the end of the line, so the reader
# knows that the expression does not end on this line.
DotPosition:
  Enabled: false



# ----- TO ENABLE LATER -----

EmptyLinesAroundBody:
  Enabled: false

EmptyLiteral:
  Enabled: false

EndAlignment:
  Enabled: false

Eval:
  Enabled: false

EvenOdd:
  Enabled: false

FavorSprintf:
  Enabled: false

FavorUnlessOverNegatedIf:
  Enabled: false

HandleExceptions:
  Enabled: false

HashMethods:
  Enabled: false

IfUnlessModifier:
  Enabled: false

IndentationWidth:
  Enabled: false

Lambda:
  Enabled: false

MethodLength:
  Enabled: false

MethodName:
  Enabled: false

MultilineBlockChain:
  Enabled: false

MultilineTernaryOperator:
  Enabled: false

NestedTernaryOperator:
  Enabled: false

OpMethod:
  Enabled: false

ParenthesesAroundCondition:
  Enabled: false

PerlBackrefs:
  Enabled: false

Proc:
  Enabled: false

RaiseArgs:
  Enabled: false

RedundantBegin:
  Enabled: false

RedundantException:
  Enabled: false

RedundantReturn:
  Enabled: false

RedundantSelf:
  Enabled: false

RegexpLiteral:
  Enabled: false

RescueException:
  Enabled: false

RescueModifier:
  Enabled: false

ShadowingOuterLocalVariable:
  Enabled: false

SignalException:
  Enabled: false

SingleLineMethods:
  Enabled: false

SpaceAfterComma:
  Enabled: false

SpaceAfterNot:
  Enabled: false

SpaceAroundBlockBraces:
  Enabled: false

SpaceAroundEqualsInParameterDefault:
  Enabled: false

SpaceAroundOperators:
  Enabled: false

SpaceInsideBrackets:
  Enabled: false

SpaceInsideHashLiteralBraces:
  Enabled: false

SpaceInsideParens:
  Enabled: false

SpecialGlobalVars:
  Enabled: false

StringLiterals:
  Enabled: false

Syntax:
  Enabled: false

TrivialAccessors:
  Enabled: false

UnlessElse:
  Enabled: false

UselessAssignment:
  Enabled: false

WordArray:
  Enabled: false
