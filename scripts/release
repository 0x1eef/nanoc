#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'octokit'
require 'shellwords'

def run(*args)
  puts('<exec> ' + args.map { |s| Shellwords.escape(s) }.join(' '))
  system(*args)
end

puts '=== Logging in to GitHub’s API…'
client = Octokit::Client.new(netrc: true)
puts

puts '=== Deleting old *.gem files…'
Dir['*.gem'].each do |fn|
  puts "deleting #{fn}…"
  FileUtils.rm_f(fn)
end
puts

puts '=== Verifying presence of release date…'
release_line = File.readlines('NEWS.md').drop(2).first
unless release_line =~ / \(\d{4}-\d{2}-\d{2}\)$/
  $stderr.puts 'No proper release date found!'
  exit 1
end
unless release_line.include?(Time.now.strftime('%Y-%m-%d'))
  $stderr.puts 'The release date does not match today’s date!'
  exit 1
end
puts

puts '=== Reading version…'
require './lib/nanoc/version'
puts "Version = #{Nanoc::VERSION}"
puts

puts '=== Building gems…'
run('bundle', 'exec', 'rake', 'gem')
puts

puts '=== Verifying that gems were built properly…'
gem_filenames = [
  "nanoc-#{Nanoc::VERSION}.gem",
  "nanoc-live/nanoc-live-#{Nanoc::Live::VERSION}.gem",
]
missing_gem_filenames = gem_filenames.reject { |g| File.file?(g) }
if missing_gem_filenames.any?
  $stderr.puts "Could not find some gems: #{gem_filenames.join(', ')}"
  $stderr.puts 'ABORTED!'
  exit 1
end
puts

puts '=== Verifying that release does not yet exist…'
releases = client.releases('nanoc/nanoc')
release = releases.find { |r| r.tag_name == Nanoc::VERSION }
if release
  $stderr.puts 'Release already exists!'
  $stderr.puts 'ABORTED!'
  exit 1
end
puts

puts '=== Reading release notes…'
release_notes =
  File.readlines('NEWS.md')
      .drop(4)
      .take_while { |l| l !~ /^## / }
      .join
puts

puts '=== Creating Git tag…'
run('git', 'tag', '--sign', '--annotate', Nanoc::VERSION, '--message', "Version #{Nanoc::VERSION}")
puts

puts '=== Pushing Git data…'
run('git', 'push', 'origin', '--tags')
puts

puts '=== Pushing gem…'
gem_filenames.each do |fn|
  run('gem', 'push', fn)
end
puts

puts '=== Creating release on GitHub…'
sleep 3 # Give GitHub some time to detect the new tag
is_prerelease = Nanoc::VERSION =~ /a|b|rc/ || Nanoc::VERSION =~ /^0/
client.create_release(
  'nanoc/nanoc', Nanoc::VERSION,
  prerelease: !is_prerelease.nil?,
  body: release_notes
)
puts

puts 'DONE!'
